generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id     String  @id @default(uuid())
  name   String?
  url    String?
  size   String?
  type   String?
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  password  String
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  documents Document[]
  folders   Folder[]
  aiCount   Int?       @default(100)
  files     File[]
}

model VerificationToken {
  identifier String   @id @default(uuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String   @id @default(uuid())
  userId      String
  folderId    String?
  title       String?
  description String?
  contentSize Int?
  inTrash     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model Folder {
  id        String     @id @default(uuid())
  userId    String
  name      String
  inTrash   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]
}
